{"version":3,"sources":["vite.config.js"],"names":["process","_dev","require","_node","_vite","_viteTsconfigPaths","_interopRequireDefault","installGlobals","nativeFetch","env","HOST","startsWith","SHOPIFY_APP_URL","concat","appUrl","URL","console","error","hmrConfig","host","hostname","parseInt","FRONTEND_PORT","defineConfig","server","protocol","clientPort","PORT","hmr","fs","allow","allowedHosts","cors","preflightContinue","ignoredRouteFiles","port","Number","v3_fetcherPersist","v3_relativeSplatPath","v3_throwAbortReason","v3_singleFetch","v3_routeConfig","future","v3_lazyRouteDiscovery","ssr","optimizeDeps","include"],"mappings":"2FAEA,IASIA,OATJC,KAAAC,QAAA,kBACAC,MAAAD,QAAA,mBACAE,MAAAF,QAAA,QACAG,mBAAAC,uBAAAJ,QAAA,iGAHA,EAAAC,MAAAI,gBAAA,CAAAC,aAAA,IAEAR,QAAAS,IAAAC,OAQOV,QAAQS,IAAIC,KAAKC,WAAW,YAAeX,QAAQS,IAAIC,KAAKC,WAAW,YAZ9EX,QAAAS,IAAAG,gBAAAZ,QAAAS,IAAAC,KAcIV,QAAQS,IAAIG,gBAAZ,WAAAC,OAAyCb,QAAQS,IAAIC,aAPxCF,QAAaC,IAAAC,MAK5B,IACEI,OAAA,IAAAC,IAAAf,QAAAS,IAAAG,iBAAA,oBACAZ,MAAAA,GACDgB,QAAMC,MACL,yFACAjB,EAAAA,SAcFc,OAAS,IAAIC,IAAI,oBAGnB,IACIG,UADEC,KAAOL,OAAOM,SAVpBF,UAaa,cAATC,KAbA,CACFL,SAAS,KACTK,KAAA,YACAH,KAAQC,MAIRH,WAAaC,OAGFD,CACTI,SAAJ,MAYIC,KAAMA,KAVNA,KAAIE,SAAKrB,QAAaS,IAAAa,gBAAA,KACxBJ,WAAY,mBAIA,EAAAd,MAAAmB,cAAE,CAJFC,OAAZ,CAOAN,aAAY,CAAAC,KAAA,gDAAA,qDAAA,0DAAA,sDAAA,gDAAA,kDAAA,4CAAA,qEAAA,4CAAA,gDAAA,wBAAA,uCAAA,mDAAA,mDAAA,mDAAA,oEAAA,uDAAA,gDAAA,kDAAA,qDAAA,6DACVM,KAAAA,CACAN,mBAFU,GAIVO,KAAAA,OAAY1B,QAAAS,IAAAkB,MAAA,KAJdC,IAAAV,UAMDW,GAAA,CAaKC,MAAO,CAAC,MAXC,kBAGXC,QAAAA,EACAC,EAAAA,KAAAA,YAAM,CACJC,mBAAmB,MAJfC,kBAAA,CAAA,SAMNC,OAAMC,CACHC,mBAPG,EAQFC,sBAAA,EACFC,qBAAA,EACAT,uBAAe,EAFbU,gBAAA,EAToBC,gBAAA,MAgBK,EAAApC,mBAAA,YAE3BqC,MAAAA,CACEL,kBAAiB,GAEjBE,aAAAA,CACAI,QAAAA,CAAAA,4BAJM,qBAAAC,IAAA,CAcZC,SAAY,CACVC,UAjCwB,qBAmC1B,kBACG","file":"vite.config.min.js","sourcesContent":["// vite.config.js\r\n\r\nimport { vitePlugin as remix } from \"@remix-run/dev\";\r\nimport { installGlobals } from \"@remix-run/node\";\r\nimport { defineConfig } from \"vite\";\r\nimport tsconfigPaths from \"vite-tsconfig-paths\";\r\n\r\ninstallGlobals({ nativeFetch: true });\r\n\r\n// Handle process.env.HOST which might be set by development tools\r\n// Ensure SHOPIFY_APP_URL is always a full URL with a protocol\r\nif (process.env.HOST) {\r\n  if (!process.env.HOST.startsWith('http://') && !process.env.HOST.startsWith('https://')) {\r\n    // If HOST is just a hostname, prepend https://\r\n    process.env.SHOPIFY_APP_URL = `https://${process.env.HOST}`;\r\n  } else {\r\n    // If HOST is already a full URL, use it directly\r\n    process.env.SHOPIFY_APP_URL = process.env.HOST;\r\n  }\r\n  delete process.env.HOST; // Clean up the HOST variable\r\n}\r\n\r\n// Safely parse SHOPIFY_APP_URL, falling back to a valid localhost URL\r\nlet appUrl;\r\ntry {\r\n  appUrl = new URL(process.env.SHOPIFY_APP_URL || \"http://localhost\");\r\n} catch (e) {\r\n  console.error(\r\n    \"Invalid SHOPIFY_APP_URL environment variable. Falling back to http://localhost. Error:\",\r\n    e.message\r\n  );\r\n  appUrl = new URL(\"http://localhost\");\r\n}\r\n\r\nconst host = appUrl.hostname;\r\nlet hmrConfig;\r\n\r\nif (host === \"localhost\") {\r\n  hmrConfig = {\r\n    protocol: \"ws\",\r\n    host: \"localhost\",\r\n    port: 64999,\r\n    clientPort: 64999,\r\n  };\r\n} else {\r\n  hmrConfig = {\r\n    protocol: \"wss\",\r\n    host: host,\r\n    port: parseInt(process.env.FRONTEND_PORT) || 8002,\r\n    clientPort: 443,\r\n  };\r\n}\r\n\r\nexport default defineConfig({\r\n  server: {\r\n    // Add the Cloudflare Tunnel hostname to allowedHosts\r\n    allowedHosts: [host,'youth-cost-advance-animated.trycloudflare.com','tourist-flickr-societies-numbers.trycloudflare.com','achieving-superior-campaigns-acoustic.trycloudflare.com','textbook-deluxe-properties-inform.trycloudflare.com' , 'vehicle-doctor-brakes-dress.trycloudflare.com' , 'acquired-store-clips-yourself.trycloudflare.com' , 'assembly-pt-barry-cindy.trycloudflare.com', 'https://b9a0-2001-818-dcec-f800-3992-38fc-f3f1-3be1.ngrok-free.app','assembly-pt-barry-cindy.trycloudflare.com', 'wool-clinic-standing-cities.trycloudflare.com', 'http://localhost:3000','teams-wait-rise-ve.trycloudflare.com' , 'damage-platforms-blessed-woods.trycloudflare.com', 'damage-platforms-blessed-woods.trycloudflare.com', 'damage-platforms-blessed-woods.trycloudflare.com', 'prescription-screenshot-calculation-evaluations.trycloudflare.com', 'complement-losing-commissions-wrap.trycloudflare.com', 'emotional-regularly-boy-mls.trycloudflare.com', 'clothes-assumptions-globe-van.trycloudflare.com', 'canal-fellowship-downloading-kai.trycloudflare.com', 'e77b-2001-818-dcec-f800-39a8-e93f-fb40-34a.ngrok-free.app'],\r\n    cors: {\r\n      preflightContinue: true,\r\n    },\r\n    port: Number(process.env.PORT || 3000),\r\n    hmr: hmrConfig,\r\n    fs: {\r\n      // See https://vitejs.dev/config/server-options.html#server-fs-allow for more information\r\n      allow: [\"app\", \"node_modules\"],\r\n    },\r\n  },\r\n  plugins: [\r\n    remix({\r\n      serverModuleFormat: \"esm\", // Keep this for ESM output\r\n      ignoredRouteFiles: [\"**/.*\"],\r\n      future: {\r\n        v3_fetcherPersist: true,\r\n        v3_relativeSplatPath: true,\r\n        v3_throwAbortReason: true,\r\n        v3_lazyRouteDiscovery: true,\r\n        v3_singleFetch: false,\r\n        v3_routeConfig: true,\r\n      },\r\n    }),\r\n    tsconfigPaths(),\r\n  ],\r\n  build: {\r\n    assetsInlineLimit: 0,\r\n  },\r\n  optimizeDeps: {\r\n    include: [\"@shopify/app-bridge-react\", \"@shopify/polaris\"],\r\n  },\r\n  // THIS IS THE MODIFIED SSR BLOCK\r\n  ssr: {\r\n    // Explicitly externalize these packages.\r\n    // This tells Vite *NOT* to bundle or transform them.\r\n    // It assumes Node.js itself will correctly load these CommonJS packages\r\n    // at runtime, leveraging Node's built-in CJS-ESM interop.\r\n    external: [\r\n      \"express\",             // Original 'require' error culprit\r\n      \"@remix-run/express\",  // Current 'exports' error culprit\r\n      \"@remix-run/node\",     // Likely also problematic CJS internally\r\n      \"http\",                // Node.js built-in module, should always be external\r\n    ],\r\n  },\r\n});\r\n"]}