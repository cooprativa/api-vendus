{"version":3,"sources":["pagesManager.js"],"names":["_promises","_interopRequireDefault","require","_path","DATA_DIR","path","join","process","cwd","PAGES_FILE","readPages","data","pages","regeneratorRuntime","async","_context","prev","next","awrap","fs","access","readFile","sent","JSON","parse","abrupt","Array","isArray","t0","code","mkdir","recursive","writeFile","stop","addPage","pageData","_context2","push","stringify","writePages","_context3"],"mappings":"sJACA,IAAAA,UAAAC,uBAAAC,QAAA,gBACAC,MAAAF,uBAAAC,QAAA,iFAEA,IAAME,SAAWC,MAAAA,QAAKC,KAAKC,QAAQC,MAAO,MAAO,QAC3CC,WAAaJ,MAAAA,QAAKC,KAAKF,SAAU,cAGhC,SAAeM,YAAf,IAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAEGC,UAAAA,QAAGC,OAAOX,aAFb,KAAA,EAAA,OAAAM,EAAAE,KAAA,EAAAJ,mBAAAK,MANPC,UAAAA,QAAAE,SAAAZ,WAAA,SAMO,KAAA,EAAA,OANPE,EAMOI,EAAAO,KAIGV,EAAQW,KAAKC,MAAMb,GAJtBI,EAAAU,OAAA,SAKIC,MAAMC,QAAQf,GAASA,EAAQ,IALnC,KAAA,GAAA,GAAAG,EAAAC,KAAA,GAAAD,EAAAa,GAAAb,EAAA,MAAA,GARP,WAAAA,EAAAa,GAAAC,KAQO,OAAAd,EAAAE,KAAA,GAAAJ,mBAAAK,MASKC,UAAAA,QAAGW,MAAM1B,SAAU,CAAE2B,WAAW,KATrChB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAE,KAAA,GAAAJ,mBAAAK,MAHDT,UAAAA,QAAUuB,UAAG3B,WAAKC,KAAKF,UAAU,GAAA,KAAvC,KAGO,KAAA,GAAA,OAAAW,EAAAU,OAAA,SAWM,IAXN,KAAA,GAAA,MAAAV,EAAAa,GAAA,KAAA,GAAA,IAAA,MAAA,OAAAb,EAAAkB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAAA,SAAAC,QAAAC,GAAA,IAAAvB,EAAA,OAAAC,mBAAAC,MAAA,SAAAsB,GAAA,OAAA,OAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,KAAA,EAAA,OAAAmB,EAAAnB,KAAA,EAAAJ,mBAAAK,MAAAR,aAAA,KAAA,EAAA,OAAAE,EAAAwB,EAAAd,MAAAe,KAAAF,GAAAC,EAAAnB,KAAA,EAAAJ,mBAAAK,MAAAC,UAAAA,QAAAa,UAAAvB,WAAAc,KAAAe,UAEGnB,EAAAA,KAAAA,KAFH,KAAA,EAAA,OAAAiB,EAAAX,OAAA,SAsBEU,GAtBF,KAAA,EAAA,IAAA,MAAA,OAAAC,EAAAH,UA0BA,SAAeM,WAAW3B,GAA1B,OAAAC,mBAAAC,MAAA,SAAA0B,GAAA,OAAA,OAAAA,EAAAxB,KAAAwB,EAAAvB,MAAA,KAAA,EAAA,OAAAuB,EAAAvB,KAAA,EAAAJ,mBAAAK,MA1BAC,UAAAA,QAAAW,MAAA1B,SAAA,CAAA2B,WAAA,KA0BA,KAAA,EAAA,OAAAS,EAAAvB,KAAA,EAAAJ,mBAAAK,MAvBGP,UAAAA,QAAAA,UAHHF,WAAAc,KAAAe,UAAA1B,EAAA,KAAA,KA0BA,KAAA,EAAA,IAAA,MAAA,OAAA4B,EAAAP","file":"pagesManager.min.js","sourcesContent":["// app/utils/pagesManager.js\r\nimport fs from \"fs/promises\";\r\nimport path from \"path\";\r\n\r\nconst DATA_DIR = path.join(process.cwd(), \"app\", \"data\");\r\nconst PAGES_FILE = path.join(DATA_DIR, \"pages.json\");\r\n\r\n// Read all pages\r\nexport async function readPages() {\r\n  try {\r\n    await fs.access(PAGES_FILE);\r\n    const data = await fs.readFile(PAGES_FILE, \"utf8\");\r\n    const pages = JSON.parse(data);\r\n    return Array.isArray(pages) ? pages : [];\r\n  } catch (error) {\r\n    if (error.code === \"ENOENT\") {\r\n      // File doesn't exist, create empty array\r\n      await fs.mkdir(DATA_DIR, { recursive: true });\r\n      await fs.writeFile(PAGES_FILE, JSON.stringify([], null, 2));\r\n      return [];\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Add a new page\r\nexport async function addPage(pageData) {\r\n  const pages = await readPages();\r\n  pages.push(pageData);\r\n  await fs.writeFile(PAGES_FILE, JSON.stringify(pages, null, 2));\r\n  return pageData;\r\n}\r\n\r\n// Write all pages (replace entire collection)\r\nexport async function writePages(pages) {\r\n  await fs.mkdir(DATA_DIR, { recursive: true });\r\n  await fs.writeFile(PAGES_FILE, JSON.stringify(pages, null, 2));\r\n}\r\n"]}