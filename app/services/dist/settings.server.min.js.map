{"version":3,"sources":["settings.server.js"],"names":["require","settingsStore","lastUpdated","getSettings","_objectSpread","vendusApi","process","env","VENDUS_API_KEY","updateSettings","newSettings","console","warn","restOfSettings","_objectWithoutProperties","apiKey"],"mappings":"60CAIAA,QAAA,iBAMA,IAAIC,cAAgB,CAClBC,YAAa,MAGR,SAASC,cAEd,OAAAC,cAAA,GACKH,cADL,CAEEI,UAAWC,QAAQC,IAAIC,gBAAkB,KAX7C,SAAAC,eAAAC,GAIER,GAAAA,cAAkBQ,EAAA,CAgBhBC,QAAQC,KAAK,4JAE4BF,EAAjCL,UAlBQ,IAkBMQ,EAlBNC,yBAkByBJ,EAlBzB,CAAA,cAGbT,cAASE,cAAAA,GAAcF,cAAdE,GAAcU,QAI1BR,cAAWC,cAAAA,GAAQC,cAARD,GAAAI,GAFb,OAAAT,cAMK,SAASQ,eAEd,IAAAM,EAAAT,QAAAC,IAAAC,eAoBA,OAnBAO,GACAJ,QAAIC,KAAA,iFAkBGG","file":"settings.server.min.js","sourcesContent":["// app/services/settings.server.js\r\n\r\n// This line ensures your .env variables are loaded at application startup.\r\n// Make sure you have a .env file in your project root with VENDUS_API_KEY=YOUR_KEY\r\nimport 'dotenv/config';\r\n\r\n// If you have other settings you want to manage through the UI and persist,\r\n// you would need a database for 'settingsStore'. For the API key,\r\n// process.env is the correct source.\r\n// For now, we'll keep a minimal settingsStore if getSettings/updateSettings are still called by app.settings.jsx\r\nlet settingsStore = {\r\n  lastUpdated: null // This can still be updated by the UI\r\n};\r\n\r\nexport function getSettings() {\r\n  // Return the in-memory settings, but ensure vendusApi always comes from process.env\r\n  return {\r\n    ...settingsStore,\r\n    vendusApi: process.env.VENDUS_API_KEY || \"\" // This is the crucial change\r\n  };\r\n}\r\n\r\nexport function updateSettings(newSettings) {\r\n  // This function will update the 'settingsStore' with general settings.\r\n  // It's CRUCIAL that it does NOT try to update the 'vendusApi' property,\r\n  // as the API key should only be set via environment variables.\r\n  if ('vendusApi' in newSettings) {\r\n    console.warn(\"Attempted to update Vendus API key via updateSettings. It should be set via environment variable (VENDUS_API_KEY). Ignoring this update for 'vendusApi'.\");\r\n    // Destructure to exclude vendusApi from being saved to the in-memory store\r\n    const { vendusApi, ...restOfSettings } = newSettings;\r\n    settingsStore = { ...settingsStore, ...restOfSettings };\r\n  } else {\r\n    // If 'vendusApi' is not in newSettings, update as normal.\r\n    settingsStore = { ...settingsStore, ...newSettings };\r\n  }\r\n  return settingsStore;\r\n}\r\n\r\nexport function getVendusApi() {\r\n  // This function is dedicated to providing the Vendus API key directly from environment variables.\r\n  const apiKey = process.env.VENDUS_API_KEY;\r\n  if (!apiKey) {\r\n    console.warn(\"⚠️ VENDUS_API_KEY environment variable is not set. Vendus API calls may fail.\");\r\n  }\r\n  return apiKey;\r\n}\r\n"]}