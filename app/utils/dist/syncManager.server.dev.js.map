{"version":3,"sources":["syncManager.server.js"],"names":["syncJobState","isRunning","intervalId","lastServerSync","serverSyncCount","syncInterval","errors","authPayload","getServerSyncStatus","slice","performSync","console","log","syncResult","Date","toISOString","success","message","length","error","push","timestamp","type","createdProducts","updatedProducts","startServerSyncJob","intervalMs","stopServerSyncJob","initialSyncResult","setInterval","status","clearInterval","updateSyncInterval","performManualSync","getSyncStatistics","uptime","now","getTime","nextSyncIn","healthStatus","recentErrors","clearSyncErrors","errorCount","process","on"],"mappings":"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","sourcesContent":["// app/utils/syncManager.server.js\r\nimport { syncProductsWithShopify } from '../services/productSync.server.js';\r\n\r\n/**\r\n * Server-side sync manager that handles persistent background synchronization\r\n * This manages a server-side cron-like job that runs at regular intervals\r\n */\r\n\r\n// In-memory storage for sync job state (in production, consider using Redis or database)\r\nlet syncJobState = {\r\n  isRunning: false,\r\n  intervalId: null,\r\n  lastServerSync: null,\r\n  serverSyncCount: 0,\r\n  syncInterval: 30000, // 30 seconds default\r\n  errors: [],\r\n  authPayload: null\r\n};\r\n\r\n/**\r\n * Gets the current status of the server-side sync job\r\n * @returns {Object} Current sync job status\r\n */\r\nexport function getServerSyncStatus() {\r\n  return {\r\n    isRunning: syncJobState.isRunning,\r\n    lastServerSync: syncJobState.lastServerSync,\r\n    serverSyncCount: syncJobState.serverSyncCount,\r\n    syncInterval: syncJobState.syncInterval,\r\n    errors: syncJobState.errors.slice(-5) // Return last 5 errors\r\n  };\r\n}\r\n\r\n/**\r\n * Performs a single sync operation\r\n * @param {Object} authPayload - Shopify authentication payload\r\n * @returns {Promise<Object>} Sync results\r\n */\r\nasync function performSync(authPayload) {\r\n  try {\r\n    console.log('üîÑ Starting server-side sync job...');\r\n\r\n    const syncResult = await syncProductsWithShopify(authPayload);\r\n\r\n    // Update sync statistics\r\n    syncJobState.lastServerSync = new Date().toISOString();\r\n    syncJobState.serverSyncCount++;\r\n\r\n    // Log the results\r\n    if (syncResult.success) {\r\n      console.log(`‚úÖ Server sync completed successfully:`, syncResult.message);\r\n\r\n      // Clear old errors on successful sync\r\n      if (syncJobState.errors.length > 0) {\r\n        syncJobState.errors = [];\r\n      }\r\n    } else {\r\n      console.error('‚ùå Server sync failed:', syncResult.error);\r\n\r\n      // Add error to the error log\r\n      syncJobState.errors.push({\r\n        timestamp: new Date().toISOString(),\r\n        error: syncResult.error,\r\n        type: 'sync_failure'\r\n      });\r\n\r\n      // Keep only last 10 errors\r\n      if (syncJobState.errors.length > 10) {\r\n        syncJobState.errors = syncJobState.errors.slice(-10);\r\n      }\r\n    }\r\n\r\n    return syncResult;\r\n\r\n  } catch (error) {\r\n    console.error('üí• Fatal error in server sync:', error);\r\n\r\n    // Add fatal error to the error log\r\n    syncJobState.errors.push({\r\n      timestamp: new Date().toISOString(),\r\n      error: error.message,\r\n      type: 'fatal_error'\r\n    });\r\n\r\n    return {\r\n      success: false,\r\n      error: `Fatal sync error: ${error.message}`,\r\n      createdProducts: [],\r\n      updatedProducts: [],\r\n      errors: []\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Starts the server-side sync job\r\n * @param {Object} authPayload - Shopify authentication payload\r\n * @param {number} intervalMs - Sync interval in milliseconds (optional)\r\n * @returns {Object} Result of starting the sync job\r\n */\r\nexport async function startServerSyncJob(authPayload, intervalMs = 30000) {\r\n  try {\r\n    // Stop any existing sync job first\r\n    if (syncJobState.isRunning) {\r\n      console.log('üõë Stopping existing sync job before starting new one...');\r\n      stopServerSyncJob();\r\n    }\r\n\r\n    // Store the auth payload for use in the interval\r\n    syncJobState.authPayload = authPayload;\r\n    syncJobState.syncInterval = intervalMs;\r\n\r\n    console.log(`üöÄ Starting server-side sync job with ${intervalMs}ms interval...`);\r\n\r\n    // Perform initial sync\r\n    const initialSyncResult = await performSync(authPayload);\r\n\r\n    // Set up the recurring sync job\r\n    syncJobState.intervalId = setInterval(async () => {\r\n      if (syncJobState.isRunning && syncJobState.authPayload) {\r\n        await performSync(syncJobState.authPayload);\r\n      }\r\n    }, intervalMs);\r\n\r\n    // Mark as running\r\n    syncJobState.isRunning = true;\r\n\r\n    console.log('‚úÖ Server-side sync job started successfully');\r\n\r\n    return {\r\n      success: true,\r\n      message: `Server sync job started with ${intervalMs}ms interval`,\r\n      initialSyncResult,\r\n      status: getServerSyncStatus()\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Failed to start server sync job:', error);\r\n\r\n    // Clean up on failure\r\n    syncJobState.isRunning = false;\r\n    syncJobState.authPayload = null;\r\n\r\n    if (syncJobState.intervalId) {\r\n      clearInterval(syncJobState.intervalId);\r\n      syncJobState.intervalId = null;\r\n    }\r\n\r\n    return {\r\n      success: false,\r\n      message: `Failed to start server sync job: ${error.message}`,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Stops the server-side sync job\r\n * @returns {Object} Result of stopping the sync job\r\n */\r\nexport function stopServerSyncJob() {\r\n  try {\r\n    if (!syncJobState.isRunning) {\r\n      console.log('‚è∏Ô∏è Server sync job is not running');\r\n      return {\r\n        success: true,\r\n        message: 'Server sync job was not running',\r\n        status: getServerSyncStatus()\r\n      };\r\n    }\r\n\r\n    console.log('üõë Stopping server-side sync job...');\r\n\r\n    // Clear the interval\r\n    if (syncJobState.intervalId) {\r\n      clearInterval(syncJobState.intervalId);\r\n      syncJobState.intervalId = null;\r\n    }\r\n\r\n    // Mark as stopped\r\n    syncJobState.isRunning = false;\r\n    syncJobState.authPayload = null;\r\n\r\n    console.log('‚úÖ Server-side sync job stopped successfully');\r\n\r\n    return {\r\n      success: true,\r\n      message: 'Server sync job stopped successfully',\r\n      status: getServerSyncStatus()\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error stopping server sync job:', error);\r\n\r\n    // Force cleanup\r\n    syncJobState.isRunning = false;\r\n    syncJobState.authPayload = null;\r\n    syncJobState.intervalId = null;\r\n\r\n    return {\r\n      success: false,\r\n      message: `Error stopping server sync job: ${error.message}`,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Updates the sync interval for the running job\r\n * @param {number} intervalMs - New interval in milliseconds\r\n * @returns {Object} Result of updating the interval\r\n */\r\nexport function updateSyncInterval(intervalMs) {\r\n  try {\r\n    if (!syncJobState.isRunning) {\r\n      return {\r\n        success: false,\r\n        message: 'Cannot update interval - sync job is not running'\r\n      };\r\n    }\r\n\r\n    console.log(`‚è±Ô∏è Updating sync interval to ${intervalMs}ms...`);\r\n\r\n    // Clear existing interval\r\n    if (syncJobState.intervalId) {\r\n      clearInterval(syncJobState.intervalId);\r\n    }\r\n\r\n    // Set new interval\r\n    syncJobState.syncInterval = intervalMs;\r\n    syncJobState.intervalId = setInterval(async () => {\r\n      if (syncJobState.isRunning && syncJobState.authPayload) {\r\n        await performSync(syncJobState.authPayload);\r\n      }\r\n    }, intervalMs);\r\n\r\n    console.log('‚úÖ Sync interval updated successfully');\r\n\r\n    return {\r\n      success: true,\r\n      message: `Sync interval updated to ${intervalMs}ms`,\r\n      status: getServerSyncStatus()\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error updating sync interval:', error);\r\n\r\n    return {\r\n      success: false,\r\n      message: `Error updating sync interval: ${error.message}`,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Performs a manual sync without affecting the scheduled job\r\n * @param {Object} authPayload - Shopify authentication payload\r\n * @returns {Promise<Object>} Manual sync results\r\n */\r\nexport async function performManualSync(authPayload) {\r\n  try {\r\n    console.log('üîß Performing manual sync...');\r\n\r\n    const syncResult = await syncProductsWithShopify(authPayload);\r\n\r\n    console.log('‚úÖ Manual sync completed');\r\n\r\n    return {\r\n      success: true,\r\n      message: 'Manual sync completed',\r\n      syncResult,\r\n      status: getServerSyncStatus()\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Manual sync failed:', error);\r\n\r\n    return {\r\n      success: false,\r\n      message: `Manual sync failed: ${error.message}`,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Gets detailed sync statistics and health information\r\n * @returns {Object} Detailed sync statistics\r\n */\r\nexport function getSyncStatistics() {\r\n  return {\r\n    ...getServerSyncStatus(),\r\n    uptime: syncJobState.isRunning ? Date.now() - new Date(syncJobState.lastServerSync || Date.now()).getTime() : 0,\r\n    nextSyncIn: syncJobState.isRunning ? syncJobState.syncInterval : null,\r\n    healthStatus: syncJobState.errors.length > 0 ? 'warning' : 'healthy',\r\n    recentErrors: syncJobState.errors.slice(-3)\r\n  };\r\n}\r\n\r\n/**\r\n * Clears all stored errors\r\n * @returns {Object} Result of clearing errors\r\n */\r\nexport function clearSyncErrors() {\r\n  try {\r\n    const errorCount = syncJobState.errors.length;\r\n    syncJobState.errors = [];\r\n\r\n    console.log(`üßπ Cleared ${errorCount} sync errors`);\r\n\r\n    return {\r\n      success: true,\r\n      message: `Cleared ${errorCount} sync errors`,\r\n      status: getServerSyncStatus()\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error clearing sync errors:', error);\r\n\r\n    return {\r\n      success: false,\r\n      message: `Error clearing sync errors: ${error.message}`,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n// Graceful shutdown handler\r\nprocess.on('SIGTERM', () => {\r\n  console.log('üì¥ Received SIGTERM, stopping sync job...');\r\n  stopServerSyncJob();\r\n});\r\n\r\nprocess.on('SIGINT', () => {\r\n  console.log('üì¥ Received SIGINT, stopping sync job...');\r\n  stopServerSyncJob();\r\n});\r\n\r\n// Export the sync state for debugging purposes (remove in production)\r\nexport { syncJobState as _syncJobState };\r\n"],"file":"syncManager.server.dev.js"}