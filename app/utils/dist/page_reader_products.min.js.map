{"version":3,"sources":["page_reader_products.js"],"names":["_axios","_interopRequireDefault","require","_promises","_path","API_KEY","process","env","VENDUS_API_KEY","URL","DATA_DIR","join","cwd","SEARCH_RESULTS_FILE","apiClient","axios","create","auth","username","password","timeout","maxRedirects","headers","baseDelay","sleep","ms","Promise","resolve","setTimeout","loadSearchResultsFromFile","filePath","data","parsedData","regeneratorRuntime","async","_context","prev","next","awrap","fs","readFile","sent","RETRY_CONFIG","JSON","parse","found","Map","backoffFactor","Object","entries","abrupt","t0","console","concat","error","searchDate","Date","toISOString","totalSearched","totalFound","notFound","stop","saveSearchResultsToFile","dataToSave","_context2","recursive","_objectSpread","fromEntries","writeFile","stringify","log","fetchPageFromVendus","page","attempt","response","delay","_args3","arguments","_context3","length","undefined","get","maxRetries","Math","min","pow","maxDelay","warn","message","status","request","productsToUpdate","maxPages","foundProducts","notFoundProducts","Set","keys","vendusProduct","reference","has","set","size","exit","existingResults","updateProductsFromKnownPages","updatedFound","forEach","ref","updatedResults","Array","from","_context5","executeProductUpdate"],"mappings":"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","file":"page_reader_products.min.js","sourcesContent":["import axios from 'axios';\r\nimport fs from 'fs/promises';\r\nimport { join } from 'path';\r\nimport 'dotenv/config';\r\n\r\n// Use the environment variable for the API_KEY\r\nconst API_KEY = process.env.VENDUS_API_KEY;\r\nconst URL = \"https://www.vendus.pt/ws/v1.1/products\";\r\n\r\nconst DATA_DIR = join(process.cwd(), 'app', 'data');\r\nconst SEARCH_RESULTS_FILE = join(DATA_DIR, \"search_results.json\");\r\n\r\nconst apiClient = axios.create({\r\n  auth: {\r\n    username: API_KEY,\r\n    password: ''\r\n  },\r\n  timeout: 15000,\r\n  maxRedirects: 0,\r\n  headers: {\r\n    'Accept': 'application/json',\r\n    'User-Agent': 'Node.js API Client',\r\n    'Connection': 'keep-alive'\r\n  }\r\n});\r\n\r\nconst RETRY_CONFIG = {\r\n  maxRetries: 3,\r\n  baseDelay: 1000,\r\n  maxDelay: 8000,\r\n  backoffFactor: 2\r\n};\r\n\r\nconst sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nasync function loadSearchResultsFromFile(filePath) {\r\n  try {\r\n    const data = await fs.readFile(filePath, 'utf8');\r\n    const parsedData = JSON.parse(data);\r\n    if (parsedData.found && !(parsedData.found instanceof Map)) {\r\n      parsedData.found = new Map(Object.entries(parsedData.found));\r\n    } else if (!parsedData.found) {\r\n      parsedData.found = new Map();\r\n    }\r\n    return parsedData;\r\n  } catch (error) {\r\n    if (error.code === 'ENOENT') {\r\n      console.log(`File not found: ${filePath}. Returning empty results.`);\r\n    } else {\r\n      console.error(`Error reading or parsing search results file ${filePath}:`, error);\r\n    }\r\n    return {\r\n      searchDate: new Date().toISOString(),\r\n      totalSearched: 0,\r\n      totalFound: 0,\r\n      found: new Map(),\r\n      notFound: []\r\n    };\r\n  }\r\n}\r\n\r\nasync function saveSearchResultsToFile(filePath, data) {\r\n  try {\r\n    await fs.mkdir(join(filePath, '..'), { recursive: true });\r\n\r\n    const dataToSave = { ...data };\r\n    if (dataToSave.found instanceof Map) {\r\n      dataToSave.found = Object.fromEntries(dataToSave.found);\r\n    }\r\n    await fs.writeFile(filePath, JSON.stringify(dataToSave, null, 2), 'utf8');\r\n    console.log(`Results saved to ${filePath}`);\r\n  } catch (error) {\r\n    console.error(`Error saving search results to file ${filePath}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function fetchPageFromVendus(page, attempt = 0) {\r\n  if (!API_KEY) {\r\n    return { error: \"Vendus API Key not available. Cannot fetch Vendus data.\" };\r\n  }\r\n  try {\r\n    console.log(`Fetching Vendus products: Page ${page}, Attempt ${attempt + 1}`);\r\n    const response = await apiClient.get(URL, {\r\n      params: {\r\n        page: page,\r\n      },\r\n    });\r\n    return { data: response.data.data };\r\n  } catch (error) {\r\n    if (attempt < RETRY_CONFIG.maxRetries) {\r\n      const delay = Math.min(RETRY_CONFIG.baseDelay * Math.pow(RETRY_CONFIG.backoffFactor, attempt), RETRY_CONFIG.maxDelay);\r\n      console.warn(`Failed to fetch page ${page}. Retrying in ${delay}ms... (Attempt ${attempt + 1}/${RETRY_CONFIG.maxRetries})`);\r\n      await sleep(delay);\r\n      return fetchPageFromVendus(page, attempt + 1);\r\n    }\r\n    console.error(`Error fetching Vendus products page ${page} after ${RETRY_CONFIG.maxRetries} attempts:`, error.message);\r\n    if (error.response) {\r\n      console.error('Response data:', error.response.data);\r\n      console.error('Response status:', error.response.status);\r\n      console.error('Response headers:', error.response.headers);\r\n    } else if (error.request) {\r\n      console.error('No response received:', error.request);\r\n    }\r\n    return { error: error.message };\r\n  }\r\n}\r\n\r\nasync function updateProductsFromKnownPages(productsToUpdate, maxPages) {\r\n  const foundProducts = new Map();\r\n  const notFoundProducts = new Set(productsToUpdate.keys());\r\n  let totalSearched = 0;\r\n\r\n  for (let page = 1; page <= maxPages; page++) {\r\n    console.log(`Processing Vendus page ${page} for product updates...`);\r\n    const { data, error } = await fetchPageFromVendus(page);\r\n\r\n    if (error) {\r\n      console.error(`Skipping page ${page} due to error: ${error}`);\r\n      continue;\r\n    }\r\n\r\n    if (!data || data.length === 0) {\r\n      console.log(`No more products found on page ${page}. Ending search.`);\r\n      break;\r\n    }\r\n\r\n    totalSearched += data.length;\r\n\r\n    data.forEach(vendusProduct => {\r\n      const reference = vendusProduct.reference;\r\n      if (productsToUpdate.has(reference)) {\r\n        foundProducts.set(reference, vendusProduct);\r\n        notFoundProducts.delete(reference);\r\n        console.log(`✅ Found and updated product: ${reference}`);\r\n      }\r\n    });\r\n\r\n    if (notFoundProducts.size === 0) {\r\n      console.log(\"All specified products found. Ending search early.\");\r\n      break;\r\n    }\r\n\r\n    await sleep(200);\r\n  }\r\n\r\n  return { found: foundProducts, notFound: notFoundProducts, totalSearched };\r\n}\r\n\r\nasync function executeProductUpdate() {\r\n  console.log(\"Starting the product update process in page_reader_products.js...\");\r\n  if (!API_KEY) {\r\n    console.error(\"❌ Vendus API Key is not set. Please ensure VENDUS_API_KEY environment variable is configured.\");\r\n    process.exit(1);\r\n  }\r\n\r\n  try {\r\n    await fs.mkdir(DATA_DIR, { recursive: true });\r\n\r\n    const existingResults = await loadSearchResultsFromFile(SEARCH_RESULTS_FILE);\r\n    const productsToUpdate = existingResults.found || new Map();\r\n\r\n    if (productsToUpdate.size === 0) {\r\n      console.log(\"ℹ️ No product references found in 'search_results.json' to update from Vendus. No Vendus API search will be performed.\");\r\n      return;\r\n    }\r\n\r\n    const { found, notFound, totalSearched } = await updateProductsFromKnownPages(productsToUpdate, 10);\r\n\r\n    const updatedFound = {};\r\n    found.forEach((data, ref) => {\r\n      updatedFound[ref] = data;\r\n    });\r\n\r\n    const updatedResults = {\r\n      searchDate: new Date().toISOString(),\r\n      totalSearched: totalSearched,\r\n      totalFound: found.size,\r\n      found: updatedFound,\r\n      notFound: Array.from(notFound)\r\n    };\r\n\r\n    await saveSearchResultsToFile(SEARCH_RESULTS_FILE, updatedResults);\r\n\r\n    console.log('\\n🎉 Vendus product data update completed and results saved to search_results.json!');\r\n\r\n  } catch (error) {\r\n    console.error('❌ Vendus update process failed:', error.message);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\nexecuteProductUpdate();\r\n"]}