{"version":3,"sources":["searchPagesManager.js"],"names":["_promises","_interopRequireDefault","require","_path","DATA_DIR","path","join","process","cwd","SEARCH_PAGES_FILE","initializeSearchPagesFile","initialData","regeneratorRuntime","async","_context","prev","next","awrap","fs","access","console","log","t0","code","mkdir","recursive","pages","totalPages","lastUpdated","Date","toISOString","writeFile","JSON","stringify","stop","readSearchPages","data","parsed","_context2","readFile","sent","parse","Array","isArray","length","abrupt","error","addSearchPage","searchResult","newPage","id","concat","now","Math","random","searchDate","totalSearched","totalFound","found","notFound","searchPages","unshift","_context3","getSearchPageById","pageId","_context4","find","page","filter","clearAllSearchPages","clearedData","_context6","getSearchStats","stats","_context7","sum","totalSearches","totalNotFound","oldestSearchDate"],"mappings":"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","file":"searchPagesManager.min.js","sourcesContent":["// app/utils/searchPagesManager.js\r\nimport fs from \"fs/promises\";\r\nimport path from \"path\";\r\n\r\nconst DATA_DIR = path.join(process.cwd(), \"app\", \"data\");\r\nconst SEARCH_PAGES_FILE = path.join(DATA_DIR, \"search_pages.json\");\r\n\r\n/**\r\n * Structure of search_pages.json:\r\n * {\r\n *   \"pages\": [\r\n *     {\r\n *       \"id\": \"unique-id-timestamp\",\r\n *       \"searchDate\": \"2025-06-30T09:33:04.313Z\",\r\n *       \"totalSearched\": 1,\r\n *       \"totalFound\": 1,\r\n *       \"found\": {\r\n *         \"10000383\": {\r\n *           \"page\": 74,\r\n *           \"position\": 31,\r\n\r\n *       },\r\n *       \"notFound\": []\r\n *     }\r\n *   ],\r\n *   \"totalPages\": 1,\r\n *   \"lastUpdated\": \"2025-06-30T09:33:04.313Z\"\r\n * }\r\n */\r\n\r\nexport async function initializeSearchPagesFile() {\r\n  try {\r\n    // Check if file exists\r\n    await fs.access(SEARCH_PAGES_FILE);\r\n    console.log(\"Search pages file already exists\");\r\n  } catch (error) {\r\n    if (error.code === \"ENOENT\") {\r\n      // File doesn't exist, create it\r\n      console.log(\"Creating search pages file\");\r\n      await fs.mkdir(DATA_DIR, { recursive: true });\r\n      const initialData = {\r\n        pages: [],\r\n        totalPages: 0,\r\n        lastUpdated: new Date().toISOString()\r\n      };\r\n      await fs.writeFile(SEARCH_PAGES_FILE, JSON.stringify(initialData, null, 2));\r\n      console.log(\"Search pages file created successfully\");\r\n    } else {\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport async function readSearchPages() {\r\n  try {\r\n    await initializeSearchPagesFile();\r\n    const data = await fs.readFile(SEARCH_PAGES_FILE, \"utf8\");\r\n    const parsed = JSON.parse(data);\r\n\r\n    // Ensure the structure is correct\r\n    if (!parsed.pages || !Array.isArray(parsed.pages)) {\r\n      parsed.pages = [];\r\n    }\r\n    if (typeof parsed.totalPages !== 'number') {\r\n      parsed.totalPages = parsed.pages.length;\r\n    }\r\n\r\n    return parsed;\r\n  } catch (error) {\r\n    console.error(\"Error reading search pages:\", error);\r\n    // Return default structure on error\r\n    return {\r\n      pages: [],\r\n      totalPages: 0,\r\n      lastUpdated: new Date().toISOString()\r\n    };\r\n  }\r\n}\r\n\r\nexport async function addSearchPage(searchResult) {\r\n  try {\r\n    const searchPages = await readSearchPages();\r\n\r\n    // Create new page entry with unique ID\r\n    const newPage = {\r\n      id: `search_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      searchDate: searchResult.searchDate || new Date().toISOString(),\r\n      totalSearched: searchResult.totalSearched || 0,\r\n      totalFound: searchResult.totalFound || 0,\r\n      found: searchResult.found || {},\r\n      notFound: searchResult.notFound || []\r\n    };\r\n\r\n    // Add to beginning of array (most recent first)\r\n    searchPages.pages.unshift(newPage);\r\n    searchPages.totalPages = searchPages.pages.length;\r\n    searchPages.lastUpdated = new Date().toISOString();\r\n\r\n    // Write back to file\r\n    await fs.writeFile(SEARCH_PAGES_FILE, JSON.stringify(searchPages, null, 2));\r\n\r\n    console.log(\"Added new search page:\", newPage.id);\r\n    return newPage;\r\n  } catch (error) {\r\n    console.error(\"Error adding search page:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getSearchPageById(pageId) {\r\n  try {\r\n    const searchPages = await readSearchPages();\r\n    return searchPages.pages.find(page => page.id === pageId) || null;\r\n  } catch (error) {\r\n    console.error(\"Error getting search page by ID:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function deleteSearchPage(pageId) {\r\n  try {\r\n    const searchPages = await readSearchPages();\r\n    const initialLength = searchPages.pages.length;\r\n\r\n    searchPages.pages = searchPages.pages.filter(page => page.id !== pageId);\r\n\r\n    if (searchPages.pages.length < initialLength) {\r\n      searchPages.totalPages = searchPages.pages.length;\r\n      searchPages.lastUpdated = new Date().toISOString();\r\n\r\n      await fs.writeFile(SEARCH_PAGES_FILE, JSON.stringify(searchPages, null, 2));\r\n      console.log(\"Deleted search page:\", pageId);\r\n      return true;\r\n    }\r\n\r\n    return false; // Page not found\r\n  } catch (error) {\r\n    console.error(\"Error deleting search page:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function clearAllSearchPages() {\r\n  try {\r\n    const clearedData = {\r\n      pages: [],\r\n      totalPages: 0,\r\n      lastUpdated: new Date().toISOString()\r\n    };\r\n\r\n    await fs.writeFile(SEARCH_PAGES_FILE, JSON.stringify(clearedData, null, 2));\r\n    console.log(\"Cleared all search pages\");\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error clearing search pages:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getSearchStats() {\r\n  try {\r\n    const searchPages = await readSearchPages();\r\n\r\n    const stats = {\r\n      totalPages: searchPages.totalPages,\r\n      totalSearches: searchPages.pages.reduce((sum, page) => sum + page.totalSearched, 0),\r\n      totalFound: searchPages.pages.reduce((sum, page) => sum + page.totalFound, 0),\r\n      totalNotFound: searchPages.pages.reduce((sum, page) => sum + page.notFound.length, 0),\r\n      lastSearchDate: searchPages.pages.length > 0 ? searchPages.pages[0].searchDate : null,\r\n      oldestSearchDate: searchPages.pages.length > 0 ? searchPages.pages[searchPages.pages.length - 1].searchDate : null\r\n    };\r\n\r\n    return stats;\r\n  } catch (error) {\r\n    console.error(\"Error getting search stats:\", error);\r\n    return {\r\n      totalPages: 0,\r\n      totalSearches: 0,\r\n      totalFound: 0,\r\n      totalNotFound: 0,\r\n      lastSearchDate: null,\r\n      oldestSearchDate: null\r\n    };\r\n  }\r\n}\r\n"]}