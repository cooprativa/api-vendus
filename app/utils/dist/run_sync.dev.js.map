{"version":3,"sources":["run_sync.js"],"names":["require","execSync","path","config","pageReaderPath","join","__dirname","syncProductsWithShopify","getVendusApi","runFullSyncProcess","console","log","stdio","vendusApiKey","error","process","exit","admin","graphql","query","variables","substring","json","data","productCreate","product","id","userErrors","productUpdate","productDelete","deletedProductId","publications","edges","node","name","products","pageInfo","hasNextPage","errors","syncResult","JSON","stringify","success"],"mappings":"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","sourcesContent":["// run_sync.js\r\nconst { execSync } = require('child_process');\r\nconst path = require('path');\r\nrequire('dotenv').config(); // Load environment variables from .env\r\n\r\n// IMPORTANT: Adjust these paths based on your actual project structure.\r\n// Assuming page_reader_products.js is in the same directory as this script, or one level up.\r\nconst pageReaderPath = path.join(__dirname, 'page_reader_products.js');\r\n// If products.js and settings.server.js are in 'app/utils/' and 'app/services/' respectively,\r\n// relative to the project root, and run_sync.js is also at the project root:\r\nconst { syncProductsWithShopify } = require('./app/utils/products');\r\nconst { getVendusApi } = require('./app/services/settings.server'); // Assuming this exists to get API key\r\n\r\nasync function runFullSyncProcess() {\r\n  try {\r\n    console.log(\"--- Starting Vendus Product Data Refresh ---\");\r\n    console.log(`Executing: node ${pageReaderPath}`);\r\n\r\n    // Execute the page_reader_products.js script.\r\n    // `stdio: 'inherit'` makes its console output visible here.\r\n    execSync(`node ${pageReaderPath}`, { stdio: 'inherit' });\r\n    console.log(\"--- Vendus Product Data Refresh Completed ---\");\r\n    console.log(\"Proceeding with Shopify product synchronization...\");\r\n\r\n    // Get the Vendus API key needed for your Shopify sync (if products.js also uses it for Vendus calls)\r\n    const vendusApiKey = getVendusApi();\r\n    if (!vendusApiKey) {\r\n      console.error(\"Vendus API Key is not available. Ensure it's set in your .env or settings.server.js.\");\r\n      process.exit(1);\r\n    }\r\n\r\n    // --- Mock Shopify Admin API Client ---\r\n    // In a real Remix app, 'admin' would come from your loader context or similar.\r\n    // For this standalone script, you'd need to initialize it.\r\n    // Replace this with your actual Shopify Admin API client initialization.\r\n    // Example (using @shopify/shopify-api package for context):\r\n    // const { shopify } = require('./path/to/shopify-api-config');\r\n    // const session = await shopify.api.utils.loadCurrentSession(request, response, true); // Or fetch a permanent session\r\n    // const admin = {\r\n    //     graphql: async (query, variables) => {\r\n    //         const client = new shopify.api.clients.Graphql({ session });\r\n    //         return await client.query({ data: { query, variables } });\r\n    //     }\r\n    // };\r\n    const admin = {\r\n      graphql: async (query, variables) => {\r\n        console.log(\"--- Simulating Shopify Admin GraphQL call ---\");\r\n        console.log(\"Query (first 100 chars):\", query.substring(0, 100) + \"...\");\r\n        // In a real scenario, you'd make a network request to Shopify's GraphQL API here.\r\n        // For demonstration, returning a mock success response.\r\n        return {\r\n          json: () => ({\r\n            data: {\r\n              // Mock data for create/update/delete product mutations\r\n              productCreate: { product: { id: \"gid://shopify/Product/123456789\" }, userErrors: [] },\r\n              productUpdate: { product: { id: \"gid://shopify/Product/123456789\" }, userErrors: [] },\r\n              productDelete: { deletedProductId: \"gid://shopify/Product/987654321\", userErrors: [] },\r\n              // Mock data for queries like getPublications or searchProducts\r\n              publications: { edges: [{ node: { id: \"gid://shopify/Publication/12345\", name: \"Online Store\" } }] },\r\n              products: { edges: [], pageInfo: { hasNextPage: false } } // Mock for searchProducts query\r\n            },\r\n            errors: null\r\n          })\r\n        };\r\n      }\r\n    };\r\n\r\n    // Now, run the Shopify sync using the data updated by page_reader_products.js\r\n    const syncResult = await syncProductsWithShopify(admin);\r\n    console.log(\"\\n--- Shopify Synchronization Results ---\");\r\n    console.log(JSON.stringify(syncResult, null, 2));\r\n\r\n    if (syncResult.success) {\r\n      console.log(\"\\nüéâ Full synchronization process completed successfully!\");\r\n    } else {\r\n      console.error(\"\\n‚ùå Full synchronization process finished with errors.\");\r\n      process.exit(1); // Exit with error code if sync failed\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error(\"\\n‚ùå Error during full synchronization process:\");\r\n    console.error(error);\r\n    process.exit(1); // Exit with error code on any failure\r\n  }\r\n}\r\n\r\n// Execute the main process\r\nrunFullSyncProcess();\r\n"],"file":"run_sync.dev.js"}