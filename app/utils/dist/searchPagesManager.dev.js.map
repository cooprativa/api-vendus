{"version":3,"sources":["searchPagesManager.js"],"names":["DATA_DIR","path","join","process","cwd","SEARCH_PAGES_FILE","initializeSearchPagesFile","fs","access","console","log","code","mkdir","recursive","initialData","pages","totalPages","lastUpdated","Date","toISOString","writeFile","JSON","stringify","readSearchPages","readFile","data","parsed","parse","Array","isArray","length","error","addSearchPage","searchResult","searchPages","newPage","id","now","Math","random","toString","substr","searchDate","totalSearched","totalFound","found","notFound","unshift","getSearchPageById","pageId","find","page","deleteSearchPage","initialLength","filter","clearAllSearchPages","clearedData","getSearchStats","stats","totalSearches","reduce","sum","totalNotFound","lastSearchDate","oldestSearchDate"],"mappings":"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","sourcesContent":["// app/utils/searchPagesManager.js\r\nimport fs from \"fs/promises\";\r\nimport path from \"path\";\r\n\r\nconst DATA_DIR = path.join(process.cwd(), \"app\", \"data\");\r\nconst SEARCH_PAGES_FILE = path.join(DATA_DIR, \"search_pages.json\");\r\n\r\n/**\r\n * Structure of search_pages.json:\r\n * {\r\n *   \"pages\": [\r\n *     {\r\n *       \"id\": \"unique-id-timestamp\",\r\n *       \"searchDate\": \"2025-06-30T09:33:04.313Z\",\r\n *       \"totalSearched\": 1,\r\n *       \"totalFound\": 1,\r\n *       \"found\": {\r\n *         \"10000383\": {\r\n *           \"page\": 74,\r\n *           \"position\": 31,\r\n\r\n *       },\r\n *       \"notFound\": []\r\n *     }\r\n *   ],\r\n *   \"totalPages\": 1,\r\n *   \"lastUpdated\": \"2025-06-30T09:33:04.313Z\"\r\n * }\r\n */\r\n\r\nexport async function initializeSearchPagesFile() {\r\n  try {\r\n    // Check if file exists\r\n    await fs.access(SEARCH_PAGES_FILE);\r\n    console.log(\"Search pages file already exists\");\r\n  } catch (error) {\r\n    if (error.code === \"ENOENT\") {\r\n      // File doesn't exist, create it\r\n      console.log(\"Creating search pages file\");\r\n      await fs.mkdir(DATA_DIR, { recursive: true });\r\n      const initialData = {\r\n        pages: [],\r\n        totalPages: 0,\r\n        lastUpdated: new Date().toISOString()\r\n      };\r\n      await fs.writeFile(SEARCH_PAGES_FILE, JSON.stringify(initialData, null, 2));\r\n      console.log(\"Search pages file created successfully\");\r\n    } else {\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport async function readSearchPages() {\r\n  try {\r\n    await initializeSearchPagesFile();\r\n    const data = await fs.readFile(SEARCH_PAGES_FILE, \"utf8\");\r\n    const parsed = JSON.parse(data);\r\n\r\n    // Ensure the structure is correct\r\n    if (!parsed.pages || !Array.isArray(parsed.pages)) {\r\n      parsed.pages = [];\r\n    }\r\n    if (typeof parsed.totalPages !== 'number') {\r\n      parsed.totalPages = parsed.pages.length;\r\n    }\r\n\r\n    return parsed;\r\n  } catch (error) {\r\n    console.error(\"Error reading search pages:\", error);\r\n    // Return default structure on error\r\n    return {\r\n      pages: [],\r\n      totalPages: 0,\r\n      lastUpdated: new Date().toISOString()\r\n    };\r\n  }\r\n}\r\n\r\nexport async function addSearchPage(searchResult) {\r\n  try {\r\n    const searchPages = await readSearchPages();\r\n\r\n    // Create new page entry with unique ID\r\n    const newPage = {\r\n      id: `search_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      searchDate: searchResult.searchDate || new Date().toISOString(),\r\n      totalSearched: searchResult.totalSearched || 0,\r\n      totalFound: searchResult.totalFound || 0,\r\n      found: searchResult.found || {},\r\n      notFound: searchResult.notFound || []\r\n    };\r\n\r\n    // Add to beginning of array (most recent first)\r\n    searchPages.pages.unshift(newPage);\r\n    searchPages.totalPages = searchPages.pages.length;\r\n    searchPages.lastUpdated = new Date().toISOString();\r\n\r\n    // Write back to file\r\n    await fs.writeFile(SEARCH_PAGES_FILE, JSON.stringify(searchPages, null, 2));\r\n\r\n    console.log(\"Added new search page:\", newPage.id);\r\n    return newPage;\r\n  } catch (error) {\r\n    console.error(\"Error adding search page:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getSearchPageById(pageId) {\r\n  try {\r\n    const searchPages = await readSearchPages();\r\n    return searchPages.pages.find(page => page.id === pageId) || null;\r\n  } catch (error) {\r\n    console.error(\"Error getting search page by ID:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function deleteSearchPage(pageId) {\r\n  try {\r\n    const searchPages = await readSearchPages();\r\n    const initialLength = searchPages.pages.length;\r\n\r\n    searchPages.pages = searchPages.pages.filter(page => page.id !== pageId);\r\n\r\n    if (searchPages.pages.length < initialLength) {\r\n      searchPages.totalPages = searchPages.pages.length;\r\n      searchPages.lastUpdated = new Date().toISOString();\r\n\r\n      await fs.writeFile(SEARCH_PAGES_FILE, JSON.stringify(searchPages, null, 2));\r\n      console.log(\"Deleted search page:\", pageId);\r\n      return true;\r\n    }\r\n\r\n    return false; // Page not found\r\n  } catch (error) {\r\n    console.error(\"Error deleting search page:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function clearAllSearchPages() {\r\n  try {\r\n    const clearedData = {\r\n      pages: [],\r\n      totalPages: 0,\r\n      lastUpdated: new Date().toISOString()\r\n    };\r\n\r\n    await fs.writeFile(SEARCH_PAGES_FILE, JSON.stringify(clearedData, null, 2));\r\n    console.log(\"Cleared all search pages\");\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error clearing search pages:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getSearchStats() {\r\n  try {\r\n    const searchPages = await readSearchPages();\r\n\r\n    const stats = {\r\n      totalPages: searchPages.totalPages,\r\n      totalSearches: searchPages.pages.reduce((sum, page) => sum + page.totalSearched, 0),\r\n      totalFound: searchPages.pages.reduce((sum, page) => sum + page.totalFound, 0),\r\n      totalNotFound: searchPages.pages.reduce((sum, page) => sum + page.notFound.length, 0),\r\n      lastSearchDate: searchPages.pages.length > 0 ? searchPages.pages[0].searchDate : null,\r\n      oldestSearchDate: searchPages.pages.length > 0 ? searchPages.pages[searchPages.pages.length - 1].searchDate : null\r\n    };\r\n\r\n    return stats;\r\n  } catch (error) {\r\n    console.error(\"Error getting search stats:\", error);\r\n    return {\r\n      totalPages: 0,\r\n      totalSearches: 0,\r\n      totalFound: 0,\r\n      totalNotFound: 0,\r\n      lastSearchDate: null,\r\n      oldestSearchDate: null\r\n    };\r\n  }\r\n}\r\n"],"file":"searchPagesManager.dev.js"}