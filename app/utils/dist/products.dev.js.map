{"version":3,"sources":["products.js"],"names":["DATA_DIR","process","cwd","SEARCH_RESULTS_FILE","SHORTCUTS_FILE","SHOPIFY_LOCATION_ID","VENDUS_URL","RETRY_CONFIG","maxRetries","baseDelay","maxDelay","backoffFactor","sleep","ms","Promise","resolve","setTimeout","getRetryDelay","attempt","delay","Math","min","fetchVendusDataWithRetries","url","apiToken","axios","get","headers","timeout","response","data","console","error","message","log","Error","runSearch","productReferencesToRefresh","recursive","jsonData","searchDate","Date","toISOString","totalSearched","totalFound","found","notFound","fileContent","JSON","parse","code","success","allReferencesToSearch","Set","Object","keys","forEach","ref","add","size","vendusApi","vendusApiToken","token","allVendusProducts","foundReferences","encodeURIComponent","vendusProductData","length","product","push","reference","title","foundProduct","find","p","productData","page","position","indexOf","stringify","filePath","searchResults"],"mappings":"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","sourcesContent":["// app/utils/products.js\r\n\r\nimport { readFile, writeFile, mkdir } from 'fs/promises';\r\nimport { join } from 'path';\r\nimport axios from 'axios';\r\nimport { getVendusApi } from \"../services/settings.server\";\r\n\r\n// Data directory and file paths\r\nconst DATA_DIR = join(process.cwd(), \"app\", \"data\");\r\nconst SEARCH_RESULTS_FILE = join(DATA_DIR, \"search_results.json\");\r\nconst SHORTCUTS_FILE = join(DATA_DIR, \"shortcuts.json\");\r\n\r\n// Replace with your actual Shopify Location ID\r\n// This ID is crucial for managing inventory at a specific location in Shopify.\r\n// Ensure this ID is correct for your Shopify store. You can fetch it via the Shopify GraphQL API.\r\nconst SHOPIFY_LOCATION_ID = \"gid://shopify/Location/102699630920\"; // EXAMPLE ID, REPLACE WITH YOURS!\r\n\r\n// Vendus API Configuration (from your provided script)\r\nconst VENDUS_URL = \"https://www.vendus.pt/ws/v1.1/products\";\r\n\r\n// Retry configuration for Vendus API calls\r\nconst RETRY_CONFIG = {\r\n  maxRetries: 3,\r\n  baseDelay: 1000,\r\n  maxDelay: 8000,\r\n  backoffFactor: 2\r\n};\r\n\r\n// Sleep function for delays\r\nconst sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// Calculate exponential backoff delay\r\nfunction getRetryDelay(attempt) {\r\n  const delay = RETRY_CONFIG.baseDelay * (RETRY_CONFIG.backoffFactor ** (attempt - 1));\r\n  return Math.min(delay, RETRY_CONFIG.maxDelay);\r\n}\r\n\r\n// Function to safely fetch data from Vendus API with retries\r\nasync function fetchVendusDataWithRetries(url, apiToken, attempt = 1) {\r\n  try {\r\n    const response = await axios.get(url, {\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Authorization': `Bearer ${apiToken}`\r\n      },\r\n      timeout: 10000 // 10 seconds timeout for Vendus API\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Vendus API call failed (Attempt ${attempt}):`, error.message);\r\n    if (attempt < RETRY_CONFIG.maxRetries) {\r\n      const delay = getRetryDelay(attempt);\r\n      console.log(`Retrying in ${delay}ms...`);\r\n      await sleep(delay);\r\n      return fetchVendusDataWithRetries(url, apiToken, attempt + 1);\r\n    } else {\r\n      throw new Error(`Failed to fetch from Vendus API after ${RETRY_CONFIG.maxRetries} attempts: ${error.message}`);\r\n    }\r\n  }\r\n}\r\n\r\n// Function to run the product search and update search_results.json\r\nexport async function runSearch(productReferencesToRefresh) {\r\n  try {\r\n    // Ensure data directory exists\r\n    await mkdir(DATA_DIR, { recursive: true });\r\n\r\n    // 1. Load existing search_results.json or initialize if it doesn't exist\r\n    let jsonData = {\r\n      searchDate: new Date().toISOString(),\r\n      totalSearched: 0,\r\n      totalFound: 0,\r\n      found: {},\r\n      notFound: []\r\n    };\r\n\r\n    try {\r\n      const fileContent = await readFile(SEARCH_RESULTS_FILE, 'utf8');\r\n      jsonData = JSON.parse(fileContent);\r\n    } catch (readError) {\r\n      if (readError.code === 'ENOENT') {\r\n        console.log(\"search_results.json not found, creating new one.\");\r\n      } else {\r\n        console.error(\"Failed to read search_results.json:\", readError);\r\n        return { success: false, error: `Failed to load search results file: ${readError.message}` };\r\n      }\r\n    }\r\n\r\n    // Prepare a set of all product references to search/refresh\r\n    const allReferencesToSearch = new Set(productReferencesToRefresh);\r\n    if (jsonData.found) {\r\n      Object.keys(jsonData.found).forEach(ref => allReferencesToSearch.add(ref));\r\n    }\r\n\r\n    jsonData.totalSearched = allReferencesToSearch.size;\r\n\r\n    // Fetch Vendus API token\r\n    const vendusApi = await getVendusApi();\r\n    const vendusApiToken = vendusApi.token;\r\n\r\n    const allVendusProducts = [];\r\n    const foundReferences = new Set();\r\n\r\n    // 2. Fetch product data from Vendus for each reference\r\n    for (const ref of allReferencesToSearch) {\r\n      try {\r\n        console.log(`🔍 Searching for product with reference: ${ref}`);\r\n        const vendusProductData = await fetchVendusDataWithRetries(`${VENDUS_URL}?ref=${encodeURIComponent(ref)}`, vendusApiToken);\r\n\r\n        if (vendusProductData && vendusProductData.data && vendusProductData.data.length > 0) {\r\n          // Assuming the first result is the most relevant\r\n          const product = vendusProductData.data[0];\r\n          allVendusProducts.push({\r\n            reference: ref, // Store the reference used for search\r\n            ...product\r\n          });\r\n          console.log(`   ✅ Found product: ${product.title} (${product.reference})`);\r\n        } else {\r\n          console.log(`   ❌ Product with reference '${ref}' not found in Vendus.`);\r\n        }\r\n      } catch (vendusError) {\r\n        console.error(`❌ Error fetching product '${ref}' from Vendus:`, vendusError.message);\r\n        jsonData.notFound.push(ref);\r\n      }\r\n    }\r\n\r\n    // 3. Update jsonData.found based on fetched products\r\n    jsonData.found = {}; // Clear previous found data to refresh\r\n    for (const ref of productReferencesToRefresh) {\r\n      const foundProduct = allVendusProducts.find(p => p.reference === ref);\r\n      if (foundProduct) {\r\n        jsonData.found[ref] = {\r\n          productData: foundProduct,\r\n          page: foundProduct.page,\r\n          position: allVendusProducts.indexOf(foundProduct) + 1 // Simple position\r\n        };\r\n        foundReferences.add(ref);\r\n      } else {\r\n        jsonData.notFound.push(ref);\r\n      }\r\n    }\r\n\r\n    jsonData.totalFound = foundReferences.size;\r\n    jsonData.searchDate = new Date().toISOString();\r\n\r\n    // 4. Save the updated JSON file\r\n    try {\r\n      await writeFile(SEARCH_RESULTS_FILE, JSON.stringify(jsonData, null, 2), 'utf8');\r\n      console.log(\"✅ Updated search_results.json with refreshed Vendus data.\");\r\n    } catch (writeError) {\r\n      console.error(\"❌ Failed to write updated search_results.json:\", writeError);\r\n      return {\r\n        success: false,\r\n        error: `Failed to save updated search results file: ${writeError.message}`,\r\n        filePath: SEARCH_RESULTS_FILE\r\n      };\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      searchResults: jsonData,\r\n      message: `Search completed. Found ${jsonData.totalFound} of ${jsonData.totalSearched} references.`\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error(\"Top-level error in runSearch:\", error);\r\n    return {\r\n      success: false,\r\n      error: `An unexpected error occurred during search: ${error.message}`\r\n    };\r\n  }\r\n}\r\n"],"file":"products.dev.js"}