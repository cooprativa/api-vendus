{"version":3,"sources":["pagesManager.js"],"names":["DATA_DIR","path","join","process","cwd","PAGES_FILE","readPages","fs","access","readFile","data","pages","JSON","parse","Array","isArray","code","mkdir","recursive","writeFile","stringify","addPage","pageData","push","writePages"],"mappings":";;;;;;;;;AACA;;AACA;;;;AAFA;AAIA,IAAMA,QAAQ,GAAGC,iBAAKC,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,KAAzB,EAAgC,MAAhC,CAAjB;;AACA,IAAMC,UAAU,GAAGJ,iBAAKC,IAAL,CAAUF,QAAV,EAAoB,YAApB,CAAnB,C,CAEA;;;AACO,SAAeM,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEGC,qBAAGC,MAAH,CAAUH,UAAV,CAFH;;AAAA;AAAA;AAAA,0CAGgBE,qBAAGE,QAAH,CAAYJ,UAAZ,EAAwB,MAAxB,CAHhB;;AAAA;AAGGK,UAAAA,IAHH;AAIGC,UAAAA,KAJH,GAIWC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAJX;AAAA,2CAKII,KAAK,CAACC,OAAN,CAAcJ,KAAd,IAAuBA,KAAvB,GAA+B,EALnC;;AAAA;AAAA;AAAA;;AAAA,gBAOC,YAAMK,IAAN,KAAe,QAPhB;AAAA;AAAA;AAAA;;AAAA;AAAA,0CASKT,qBAAGU,KAAH,CAASjB,QAAT,EAAmB;AAAEkB,YAAAA,SAAS,EAAE;AAAb,WAAnB,CATL;;AAAA;AAAA;AAAA,0CAUKX,qBAAGY,SAAH,CAAad,UAAb,EAAyBO,IAAI,CAACQ,SAAL,CAAe,EAAf,EAAmB,IAAnB,EAAyB,CAAzB,CAAzB,CAVL;;AAAA;AAAA,2CAWM,EAXN;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAiBP;;;AACO,SAAeC,OAAf,CAAuBC,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACehB,SAAS,EADxB;;AAAA;AACCK,UAAAA,KADD;AAELA,UAAAA,KAAK,CAACY,IAAN,CAAWD,QAAX;AAFK;AAAA,0CAGCf,qBAAGY,SAAH,CAAad,UAAb,EAAyBO,IAAI,CAACQ,SAAL,CAAeT,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAzB,CAHD;;AAAA;AAAA,4CAIEW,QAJF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAOP;;;AACO,SAAeE,UAAf,CAA0Bb,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACCJ,qBAAGU,KAAH,CAASjB,QAAT,EAAmB;AAAEkB,YAAAA,SAAS,EAAE;AAAb,WAAnB,CADD;;AAAA;AAAA;AAAA,0CAECX,qBAAGY,SAAH,CAAad,UAAb,EAAyBO,IAAI,CAACQ,SAAL,CAAeT,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAzB,CAFD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// app/utils/pagesManager.js\r\nimport fs from \"fs/promises\";\r\nimport path from \"path\";\r\n\r\nconst DATA_DIR = path.join(process.cwd(), \"app\", \"data\");\r\nconst PAGES_FILE = path.join(DATA_DIR, \"pages.json\");\r\n\r\n// Read all pages\r\nexport async function readPages() {\r\n  try {\r\n    await fs.access(PAGES_FILE);\r\n    const data = await fs.readFile(PAGES_FILE, \"utf8\");\r\n    const pages = JSON.parse(data);\r\n    return Array.isArray(pages) ? pages : [];\r\n  } catch (error) {\r\n    if (error.code === \"ENOENT\") {\r\n      // File doesn't exist, create empty array\r\n      await fs.mkdir(DATA_DIR, { recursive: true });\r\n      await fs.writeFile(PAGES_FILE, JSON.stringify([], null, 2));\r\n      return [];\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Add a new page\r\nexport async function addPage(pageData) {\r\n  const pages = await readPages();\r\n  pages.push(pageData);\r\n  await fs.writeFile(PAGES_FILE, JSON.stringify(pages, null, 2));\r\n  return pageData;\r\n}\r\n\r\n// Write all pages (replace entire collection)\r\nexport async function writePages(pages) {\r\n  await fs.mkdir(DATA_DIR, { recursive: true });\r\n  await fs.writeFile(PAGES_FILE, JSON.stringify(pages, null, 2));\r\n}\r\n"],"file":"pagesManager.dev.js"}