{"version":3,"sources":["products.js"],"names":["_promises","require","_path","_axios","_interopRequireDefault","_settings","DATA_DIR","join","process","cwd","SEARCH_RESULTS_FILE","SHORTCUTS_FILE","SHOPIFY_LOCATION_ID","VENDUS_URL","RETRY_CONFIG","maxRetries","baseDelay","maxDelay","backoffFactor","sleep","ms","Promise","resolve","setTimeout","getRetryDelay","attempt","Math","pow","min","delay","fetchVendusDataWithRetries","url","apiToken","axios","get","headers","Authorization","concat","timeout","response","data","console","_context","t0","message","log","Error","runSearch","productReferencesToRefresh","jsonData","fileContent","allReferencesToSearch","vendusApi","vendusApiToken","allVendusProducts","foundReferences","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","ref","vendusProductData","product","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_loop","_iterator2","_step2","regeneratorRuntime","async","_context2","prev","next","awrap","mkdir","recursive","searchDate","Date","toISOString","totalSearched","totalFound","notFound","readFile","sent","JSON","parse","code","error","abrupt","success","Set","found","forEach","add","size","getVendusApi","token","undefined","Symbol","iterator","done","value","encodeURIComponent","length","push","_objectSpread","reference","title","t1","t2","finish","find","p","productData","foundProduct","page","position","indexOf","t3","writeFile","stringify","t4","filePath","searchResults","t5","Object","stop"],"mappings":"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","file":"products.min.js","sourcesContent":["// app/utils/products.js\r\n\r\nimport { readFile, writeFile, mkdir } from 'fs/promises';\r\nimport { join } from 'path';\r\nimport axios from 'axios';\r\nimport { getVendusApi } from \"../services/settings.server\";\r\n\r\n// Data directory and file paths\r\nconst DATA_DIR = join(process.cwd(), \"app\", \"data\");\r\nconst SEARCH_RESULTS_FILE = join(DATA_DIR, \"search_results.json\");\r\nconst SHORTCUTS_FILE = join(DATA_DIR, \"shortcuts.json\");\r\n\r\n// Replace with your actual Shopify Location ID\r\n// This ID is crucial for managing inventory at a specific location in Shopify.\r\n// Ensure this ID is correct for your Shopify store. You can fetch it via the Shopify GraphQL API.\r\nconst SHOPIFY_LOCATION_ID = \"gid://shopify/Location/102699630920\"; // EXAMPLE ID, REPLACE WITH YOURS!\r\n\r\n// Vendus API Configuration (from your provided script)\r\nconst VENDUS_URL = \"https://www.vendus.pt/ws/v1.1/products\";\r\n\r\n// Retry configuration for Vendus API calls\r\nconst RETRY_CONFIG = {\r\n  maxRetries: 3,\r\n  baseDelay: 1000,\r\n  maxDelay: 8000,\r\n  backoffFactor: 2\r\n};\r\n\r\n// Sleep function for delays\r\nconst sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// Calculate exponential backoff delay\r\nfunction getRetryDelay(attempt) {\r\n  const delay = RETRY_CONFIG.baseDelay * (RETRY_CONFIG.backoffFactor ** (attempt - 1));\r\n  return Math.min(delay, RETRY_CONFIG.maxDelay);\r\n}\r\n\r\n// Function to safely fetch data from Vendus API with retries\r\nasync function fetchVendusDataWithRetries(url, apiToken, attempt = 1) {\r\n  try {\r\n    const response = await axios.get(url, {\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Authorization': `Bearer ${apiToken}`\r\n      },\r\n      timeout: 10000 // 10 seconds timeout for Vendus API\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Vendus API call failed (Attempt ${attempt}):`, error.message);\r\n    if (attempt < RETRY_CONFIG.maxRetries) {\r\n      const delay = getRetryDelay(attempt);\r\n      console.log(`Retrying in ${delay}ms...`);\r\n      await sleep(delay);\r\n      return fetchVendusDataWithRetries(url, apiToken, attempt + 1);\r\n    } else {\r\n      throw new Error(`Failed to fetch from Vendus API after ${RETRY_CONFIG.maxRetries} attempts: ${error.message}`);\r\n    }\r\n  }\r\n}\r\n\r\n// Function to run the product search and update search_results.json\r\nexport async function runSearch(productReferencesToRefresh) {\r\n  try {\r\n    // Ensure data directory exists\r\n    await mkdir(DATA_DIR, { recursive: true });\r\n\r\n    // 1. Load existing search_results.json or initialize if it doesn't exist\r\n    let jsonData = {\r\n      searchDate: new Date().toISOString(),\r\n      totalSearched: 0,\r\n      totalFound: 0,\r\n      found: {},\r\n      notFound: []\r\n    };\r\n\r\n    try {\r\n      const fileContent = await readFile(SEARCH_RESULTS_FILE, 'utf8');\r\n      jsonData = JSON.parse(fileContent);\r\n    } catch (readError) {\r\n      if (readError.code === 'ENOENT') {\r\n        console.log(\"search_results.json not found, creating new one.\");\r\n      } else {\r\n        console.error(\"Failed to read search_results.json:\", readError);\r\n        return { success: false, error: `Failed to load search results file: ${readError.message}` };\r\n      }\r\n    }\r\n\r\n    // Prepare a set of all product references to search/refresh\r\n    const allReferencesToSearch = new Set(productReferencesToRefresh);\r\n    if (jsonData.found) {\r\n      Object.keys(jsonData.found).forEach(ref => allReferencesToSearch.add(ref));\r\n    }\r\n\r\n    jsonData.totalSearched = allReferencesToSearch.size;\r\n\r\n    // Fetch Vendus API token\r\n    const vendusApi = await getVendusApi();\r\n    const vendusApiToken = vendusApi.token;\r\n\r\n    const allVendusProducts = [];\r\n    const foundReferences = new Set();\r\n\r\n    // 2. Fetch product data from Vendus for each reference\r\n    for (const ref of allReferencesToSearch) {\r\n      try {\r\n        console.log(`🔍 Searching for product with reference: ${ref}`);\r\n        const vendusProductData = await fetchVendusDataWithRetries(`${VENDUS_URL}?ref=${encodeURIComponent(ref)}`, vendusApiToken);\r\n\r\n        if (vendusProductData && vendusProductData.data && vendusProductData.data.length > 0) {\r\n          // Assuming the first result is the most relevant\r\n          const product = vendusProductData.data[0];\r\n          allVendusProducts.push({\r\n            reference: ref, // Store the reference used for search\r\n            ...product\r\n          });\r\n          console.log(`   ✅ Found product: ${product.title} (${product.reference})`);\r\n        } else {\r\n          console.log(`   ❌ Product with reference '${ref}' not found in Vendus.`);\r\n        }\r\n      } catch (vendusError) {\r\n        console.error(`❌ Error fetching product '${ref}' from Vendus:`, vendusError.message);\r\n        jsonData.notFound.push(ref);\r\n      }\r\n    }\r\n\r\n    // 3. Update jsonData.found based on fetched products\r\n    jsonData.found = {}; // Clear previous found data to refresh\r\n    for (const ref of productReferencesToRefresh) {\r\n      const foundProduct = allVendusProducts.find(p => p.reference === ref);\r\n      if (foundProduct) {\r\n        jsonData.found[ref] = {\r\n          productData: foundProduct,\r\n          page: foundProduct.page,\r\n          position: allVendusProducts.indexOf(foundProduct) + 1 // Simple position\r\n        };\r\n        foundReferences.add(ref);\r\n      } else {\r\n        jsonData.notFound.push(ref);\r\n      }\r\n    }\r\n\r\n    jsonData.totalFound = foundReferences.size;\r\n    jsonData.searchDate = new Date().toISOString();\r\n\r\n    // 4. Save the updated JSON file\r\n    try {\r\n      await writeFile(SEARCH_RESULTS_FILE, JSON.stringify(jsonData, null, 2), 'utf8');\r\n      console.log(\"✅ Updated search_results.json with refreshed Vendus data.\");\r\n    } catch (writeError) {\r\n      console.error(\"❌ Failed to write updated search_results.json:\", writeError);\r\n      return {\r\n        success: false,\r\n        error: `Failed to save updated search results file: ${writeError.message}`,\r\n        filePath: SEARCH_RESULTS_FILE\r\n      };\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      searchResults: jsonData,\r\n      message: `Search completed. Found ${jsonData.totalFound} of ${jsonData.totalSearched} references.`\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error(\"Top-level error in runSearch:\", error);\r\n    return {\r\n      success: false,\r\n      error: `An unexpected error occurred during search: ${error.message}`\r\n    };\r\n  }\r\n}\r\n"]}