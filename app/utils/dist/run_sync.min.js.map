{"version":3,"sources":["run_sync.js"],"names":["require","execSync","path","pageReaderPath","join","__dirname","syncProductsWithShopify","getVendusApi","admin","syncResult","regeneratorRuntime","async","_context2","prev","next","console","log","concat","stdio","error","process","exit","graphql","query","_context","substring","abrupt","json","data","productCreate","product","id","userErrors","productUpdate","productDelete","deletedProductId","publications","edges","node","name","products","pageInfo","hasNextPage","stop","awrap","sent","JSON","stringify","success","t0"],"mappings":"0BACqBA,QAAQ,iBAArBC,kBAAAA,SADRC,KAAAF,QAAA,QAGAA,QAAQ,UAFaA,SAMrB,IAAMG,eAAiBD,KAAKE,KAAKC,UAAW,qCAD5CL,QAAA,wBAAAM,kCAAAA,kCAKyBN,QAAQ,kCAAzBO,uBAAAA,aAJR,SAAMJ,qBAAN,IAAAK,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAQIE,QAAQC,IAAI,gDACZD,QAAQC,IAAR,mBAAAC,OANwCd,iBACpCI,SAAAA,QAAAA,OASaJ,gBATbI,CASiCW,MAT2B,YAUhEH,QAAQC,IAAI,iDACZD,QAAQC,IAAI,sDAThBT,iBAAAQ,QAAAI,MAAA,wFAAAC,QAAAC,KAAA,IAeMD,EAAAA,CACDE,QAED,SAAAC,GAAA,OAAAb,mBAAAC,MAAA,SAAAa,GAAA,OAAA,OAAAA,EAAAX,KAAAW,EAAAV,MAAA,KAAA,EAAA,OACAC,QAAAC,IAAA,iDACAD,QAAAC,IAAA,2BAAAO,EAAAE,UAAA,EAAA,KAAA,OAFAD,EAAAE,OAAA,SAKA,CACAC,KAAA,WAAA,MAAA,CACAC,KAAA,CAEAC,cAAA,CAAAC,QAAA,CAAAC,GAAA,mCAAAC,WAAA,IACAC,cAAA,CAAAH,QAAA,CAAAC,GAAA,mCAAAC,WAAA,IACAE,cAAA,CAAAC,iBAAA,kCAAAH,WAAA,IAgBUI,aAAc,CAAEC,MAAO,CAAC,CAAEC,KAAM,CAAEP,GAAI,kCAAmCQ,KAAM,mBAC/EC,SAAU,CAAEH,MAAO,GAAII,SAAU,CAAEC,aAAa,KAdxDpB,OAAO,SAdT,KAAA,EAAA,IAAA,MAAA,OAAAE,EAAAmB,YAxBJ/B,EAAAE,KAAA,GAAAJ,mBAAAkC,MA0CQtC,wBAAAE,IA1CR,KAAA,GA0CQC,EA1CRG,EAAAiC,KA8DI9B,QAAQC,IAAI,6CAxBDD,QAAAC,IAAA8B,KAAAC,UAAAtC,EAAA,KAAA,IAMCA,EAAAuC,QACJpB,QAAAA,IAAAA,8DAEEC,QAAAA,MAAAA,0DAAiBC,QAAAA,KAAAA,IA/C/BlB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAqC,GAAArC,EAAA,MAAA,GA+C6BG,QAAAI,MAAA,kDACfc,QAAAA,MAAAA,EAAAA,IAAiBH,QAAAA,KAAAA,GAhD/B,KAAA,GAAA,IAAA,MAAA,OAAAlB,EAAA+B,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAiDcT","file":"run_sync.min.js","sourcesContent":["// run_sync.js\r\nconst { execSync } = require('child_process');\r\nconst path = require('path');\r\nrequire('dotenv').config(); // Load environment variables from .env\r\n\r\n// IMPORTANT: Adjust these paths based on your actual project structure.\r\n// Assuming page_reader_products.js is in the same directory as this script, or one level up.\r\nconst pageReaderPath = path.join(__dirname, 'page_reader_products.js');\r\n// If products.js and settings.server.js are in 'app/utils/' and 'app/services/' respectively,\r\n// relative to the project root, and run_sync.js is also at the project root:\r\nconst { syncProductsWithShopify } = require('./app/utils/products');\r\nconst { getVendusApi } = require('./app/services/settings.server'); // Assuming this exists to get API key\r\n\r\nasync function runFullSyncProcess() {\r\n  try {\r\n    console.log(\"--- Starting Vendus Product Data Refresh ---\");\r\n    console.log(`Executing: node ${pageReaderPath}`);\r\n\r\n    // Execute the page_reader_products.js script.\r\n    // `stdio: 'inherit'` makes its console output visible here.\r\n    execSync(`node ${pageReaderPath}`, { stdio: 'inherit' });\r\n    console.log(\"--- Vendus Product Data Refresh Completed ---\");\r\n    console.log(\"Proceeding with Shopify product synchronization...\");\r\n\r\n    // Get the Vendus API key needed for your Shopify sync (if products.js also uses it for Vendus calls)\r\n    const vendusApiKey = getVendusApi();\r\n    if (!vendusApiKey) {\r\n      console.error(\"Vendus API Key is not available. Ensure it's set in your .env or settings.server.js.\");\r\n      process.exit(1);\r\n    }\r\n\r\n    // --- Mock Shopify Admin API Client ---\r\n    // In a real Remix app, 'admin' would come from your loader context or similar.\r\n    // For this standalone script, you'd need to initialize it.\r\n    // Replace this with your actual Shopify Admin API client initialization.\r\n    // Example (using @shopify/shopify-api package for context):\r\n    // const { shopify } = require('./path/to/shopify-api-config');\r\n    // const session = await shopify.api.utils.loadCurrentSession(request, response, true); // Or fetch a permanent session\r\n    // const admin = {\r\n    //     graphql: async (query, variables) => {\r\n    //         const client = new shopify.api.clients.Graphql({ session });\r\n    //         return await client.query({ data: { query, variables } });\r\n    //     }\r\n    // };\r\n    const admin = {\r\n      graphql: async (query, variables) => {\r\n        console.log(\"--- Simulating Shopify Admin GraphQL call ---\");\r\n        console.log(\"Query (first 100 chars):\", query.substring(0, 100) + \"...\");\r\n        // In a real scenario, you'd make a network request to Shopify's GraphQL API here.\r\n        // For demonstration, returning a mock success response.\r\n        return {\r\n          json: () => ({\r\n            data: {\r\n              // Mock data for create/update/delete product mutations\r\n              productCreate: { product: { id: \"gid://shopify/Product/123456789\" }, userErrors: [] },\r\n              productUpdate: { product: { id: \"gid://shopify/Product/123456789\" }, userErrors: [] },\r\n              productDelete: { deletedProductId: \"gid://shopify/Product/987654321\", userErrors: [] },\r\n              // Mock data for queries like getPublications or searchProducts\r\n              publications: { edges: [{ node: { id: \"gid://shopify/Publication/12345\", name: \"Online Store\" } }] },\r\n              products: { edges: [], pageInfo: { hasNextPage: false } } // Mock for searchProducts query\r\n            },\r\n            errors: null\r\n          })\r\n        };\r\n      }\r\n    };\r\n\r\n    // Now, run the Shopify sync using the data updated by page_reader_products.js\r\n    const syncResult = await syncProductsWithShopify(admin);\r\n    console.log(\"\\n--- Shopify Synchronization Results ---\");\r\n    console.log(JSON.stringify(syncResult, null, 2));\r\n\r\n    if (syncResult.success) {\r\n      console.log(\"\\nüéâ Full synchronization process completed successfully!\");\r\n    } else {\r\n      console.error(\"\\n‚ùå Full synchronization process finished with errors.\");\r\n      process.exit(1); // Exit with error code if sync failed\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error(\"\\n‚ùå Error during full synchronization process:\");\r\n    console.error(error);\r\n    process.exit(1); // Exit with error code on any failure\r\n  }\r\n}\r\n\r\n// Execute the main process\r\nrunFullSyncProcess();\r\n"]}