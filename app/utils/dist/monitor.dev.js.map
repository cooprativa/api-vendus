{"version":3,"sources":["monitor.js"],"names":["monitorState","isRunning","lastRun","nextRun","interval","timeoutId","getMonitorState","serializableMonitorState","startMonitor","callback","console","log","error","scheduleNextRun","Date","toISOString","now","clearTimeout","setTimeout","stopMonitor","toggleMonitor"],"mappings":"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","sourcesContent":["// app/utils/monitor.js\r\n\r\n// In a real application, this state would be persisted in a database (e.g., Firestore)\r\n// or a file to maintain state across server restarts or multiple instances.\r\n// For this example, it's an in-memory object, meaning it will reset if the server restarts.\r\nlet monitorState = {\r\n  isRunning: false,\r\n  lastRun: null,\r\n  nextRun: null,\r\n  interval: 30 * 1000, // 30 seconds\r\n  timeoutId: null, // To store the setTimeout ID for clearing\r\n};\r\n\r\n/**\r\n * Retrieves the current state of the monitor.\r\n * Excludes the non-serializable `timeoutId` property.\r\n * @returns {Object} The current monitor state.\r\n */\r\nexport function getMonitorState() {\r\n  // Return a copy of monitorState, explicitly omitting the timeoutId\r\n  const { timeoutId, ...serializableMonitorState } = monitorState;\r\n  return { ...serializableMonitorState };\r\n}\r\n\r\n/**\r\n * Starts the monitor timer.\r\n * @param {Function} callback - The function to execute when the timer fires.\r\n */\r\nexport function startMonitor(callback) {\r\n  if (monitorState.isRunning) {\r\n    console.log(\"Monitor is already running.\");\r\n    return;\r\n  }\r\n\r\n  // Add a type check to ensure callback is a function\r\n  if (typeof callback !== 'function') {\r\n    console.error(\"Error: startMonitor received a non-function callback. Monitor cannot be started.\", callback);\r\n    return;\r\n  }\r\n\r\n  monitorState.isRunning = true;\r\n  console.log(`Monitor started. Next run in ${monitorState.interval / 1000} seconds.`);\r\n\r\n  // Make scheduleNextRun async to properly await the callback\r\n  const scheduleNextRun = async () => {\r\n    monitorState.lastRun = new Date().toISOString();\r\n    monitorState.nextRun = new Date(Date.now() + monitorState.interval).toISOString();\r\n    console.log(`Executing scheduled task. Next run at: ${monitorState.nextRun}`);\r\n    try {\r\n      // Ensure callback is still a function before calling (defensive check)\r\n      if (typeof callback === 'function') {\r\n        await callback(); // Await the async function\r\n      } else {\r\n        console.error(\"Error: Scheduled callback is no longer a function:\", callback);\r\n        // If callback somehow becomes invalid, stop scheduling further runs\r\n        clearTimeout(monitorState.timeoutId);\r\n        monitorState.isRunning = false;\r\n        return;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"‚ùå Error executing monitor callback:\", error);\r\n    } finally {\r\n      // Reschedule the next run, even if the current callback failed\r\n      monitorState.timeoutId = setTimeout(scheduleNextRun, monitorState.interval);\r\n    }\r\n  };\r\n\r\n  // Initial immediate run, then schedule subsequent runs\r\n  scheduleNextRun();\r\n}\r\n\r\n/**\r\n * Stops the monitor timer.\r\n */\r\nexport function stopMonitor() {\r\n  if (!monitorState.isRunning) {\r\n    console.log(\"Monitor is not running.\");\r\n    return;\r\n  }\r\n\r\n  clearTimeout(monitorState.timeoutId);\r\n  monitorState.isRunning = false;\r\n  monitorState.nextRun = null;\r\n  monitorState.timeoutId = null; // Clear the timeoutId when stopped\r\n  console.log(\"Monitor stopped.\");\r\n}\r\n\r\n/**\r\n * Toggles the monitor state (starts if stopped, stops if running).\r\n * @param {Function} callback - The function to execute when the timer fires (only relevant if starting).\r\n * @returns {boolean} The new state of isRunning.\r\n */\r\nexport function toggleMonitor(callback) {\r\n  if (monitorState.isRunning) {\r\n    stopMonitor();\r\n  } else {\r\n    // Pass the callback to startMonitor\r\n    startMonitor(callback);\r\n  }\r\n  return monitorState.isRunning;\r\n}\r\n"],"file":"monitor.dev.js"}